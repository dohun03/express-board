<style>
  .subject {
    margin-bottom:10px;
  }

  .content {
    height:70%;
  }
  
  .container {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    align-items: flex-start;
    gap: 10px; /* 요소 간 간격 */
    padding: 0px;
  }

  .button-container {
    display: flex;
    gap: 5px;
    justify-content: flex-end;
  }

  /* 반응형: 화면이 작아지면 버튼이 가로로 꽉 차도록 변경 */
  @media (max-width: 768px) {
    .container {
      flex-direction: column;
    }

    .button-container {
      justify-content: space-between;
      width: 100%;
    }

    .button-container button {
      flex: 1;
    }
  }
  
  .form-container {
    background-color: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    max-width: 400px;
    text-align: center;
  }

  .file-input {
      padding: 5px;
      font-size: 14px; /* 글자 크기 조정 */
      border: 1px solid #ccc;
      border-radius: 4px;
      cursor: pointer;
      width: auto;
      display: inline-block;
  }

  .file-input:hover {
      border-color: #4CAF50; /* 마우스 오버 시 보더 색상 변경 */
  }

  .file-list {
    text-align: left;
    margin: 15px 0;
    padding-left: 0;
    list-style: none;
  }

  .file-list li {
    background-color: #eaeaea;
    padding: 5px;
    margin: 5px 0;
    border-radius: 4px;
  }

  .submit-btn {
    width: 100px;
    padding: 10px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
  }

  .submit-btn:hover {
    background-color: #45a049;
  }
  /* 파일 목록 */
  .file-list li {
    background-color: #eaeaea;
    padding: 5px;
    margin: 5px 0;
    border-radius: 4px;
    position: relative; /* 삭제 버튼을 우측에 고정하려면 부모 요소에 상대 위치를 설정 */
  }

  /* 리스트 항목에 마우스 호버 시 삭제 아이콘 표시 */
  .file-list li:hover .delete-icon {
    display: inline-block; /* 호버 시 삭제 아이콘 보이게 함 */
  }

  /* 삭제 아이콘 기본 상태: 숨김 */
  .delete-icon {
    display: none;
    position: absolute;
    top: 50%;
    right: 10px; /* 우측 10px 간격으로 배치 */
    transform: translateY(-50%); /* 수직 중앙 정렬 */
    cursor: pointer;
    color: red;
    font-size: 16px;
  }

  .truncate {
    white-space: nowrap;   /* 줄 바꿈 방지 */
    overflow: hidden;      /* 넘치는 부분 숨김 */
    text-overflow: ellipsis; /* 말줄임표(...) 표시 */
  }
</style>
<% if (data) { %>
<input class="form-control subject" value="<%= data[0].subject %>" placeholder="제목을 입력하세요" maxlength="35">
<textarea class="form-control content"><%= data[0].content %></textarea>
<% } else { %>
<input class="form-control subject" placeholder="제목을 입력하세요" maxlength="35">
<textarea class="form-control content"></textarea>
<% } %>
<br>
<div class="container">
  <div class="form-container">
    <form action="/uploads" method="post" enctype="multipart/form-data">
      <input type="file" name="userfile" id="userfile" multiple class="form-control file-input">
      <ul class="file-list">
        <% if (data && data[0].upload) { %>
          <% let uploads = data[0].upload %>
          <% uploads.forEach(item => { %>
            <li><span class="file-name"><%= item %></span><span class="delete-icon">✖</span></li>
          <% }) %>
        <% } %>
      </ul>
      <button type="submit" class="submit-btn none">업로드</button>
    </form>
  </div>
  <div class="button-container">
    <button class="btn btn-sm btn-primary save">게시글 저장</button>
    <button class="btn btn-sm btn-warning back" onclick="window.history.back()">취소</button>
  </div>
</div>

<script>
  $(document).ready(function() {
    const fileInput = $("#userfile");
    const fileList = $(".file-list");
    let selectedFiles = [];
    let form = $('form')[0];
    let formData = new FormData(); // 처음에 빈 FormData 객체 생성

    fileInput.on("change", function() {
      const files = fileInput[0].files;

      if (files.length === 0) return;

      for (let i = 0; i < files.length; i++) {
        if (!selectedFiles.includes(files[i].name)) { // 중복 방지
          selectedFiles.push(files[i].name);
          formData.append('userfile', files[i]); // 기존 formData에 계속 추가
          
          const listItem = $("<li>").addClass("truncate").text(files[i].name);
          const deleteIcon = $("<span>").addClass("delete-icon").html("&#10006;");
          listItem.append(deleteIcon);
          fileList.append(listItem);
        }
      }
      console.log(formData);
    });

    fileList.on("click", ".delete-icon", function() {
      if (confirm("정말 삭제하시겠습니까?")) {
        const listItem = $(this).parent();
        const addedFile = listItem.text().replace("✖", "").trim(); // 새로 추가된 삭제할 파일의 이름.
        const existedFile = $(this).closest('li').children('.file-name').text(); // 기존에 있던 삭제할 파일의 이름.
        selectedFiles = selectedFiles.filter(file => file !== addedFile);
        if (existedFile) {
          $.ajax({
            url: '/uploads',
            method: 'DELETE',
            data: {
              id: '<%=id%>',
              files: existedFile
            },
            success: function(response) {
              console.log('파일 삭제 성공:', response);
              listItem.remove();
            },
            error: function(xhr, status, error) {
              console.log('파일 삭제 오류:', error);
            }
          });
        } else {
          let newFormData = new FormData();
          formData.forEach((value, key) => {
              if (value.name !== addedFile) {
                  newFormData.append(key, value);
              }
          });
          formData = newFormData;
          listItem.remove();
        }
      }
    });

    $('.save').click(function(e) {
      e.preventDefault();

      let subject = $('.subject').val();
      let content = $('.content').val();
      let url, method;

      if (!subject || !content) {
        alert("제목과 내용을 입력해주세요.");
        return;
      }

      $(this).attr("disabled", true); // 도배 예방
      $(this).text("저장 중..");
      
      if ('<%=status%>' === 'update') {
        url = '/boards/<%=id%>';
        method = 'PATCH';
      } else if ('<%=status%>' === 'create') {
        url = '/boards';
        method = 'POST';
      }
      
      $.ajax({
        url: url,
        method: method,
        data: { 
          subject: subject, 
          content: content
        },
        success: function(response) {
          let id = response.insertId ? response.insertId : '<%=id%>';
          formData.append('id', id);
          for (let pair of formData.entries()) {
            console.log(pair[0], pair[1]);
          }


          if (selectedFiles.length > 0) {
            $.ajax({
              url: '/uploads',
              method: 'POST',
              data: formData,
              processData: false,
              contentType: false,
              success: function(response) {
                document.location.href = '/boards/'+id;
              },
              error: function(xhr, status, error) {
                console.log('파일 업로드 오류:', xhr.responseText);
                alert(xhr.responseText);
              }
            });
          } else{
            document.location.href = '/boards/'+id;
          }
        },
        error: function(xhr, status, error) {
          console.log('error', error);
          alert(xhr.responseText);
        }
      });
    });
  });
</script>